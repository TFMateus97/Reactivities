{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/ActivityStore.ts","app/stores/ProfileStore.ts","app/stores/UserStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/homePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/modalContainer.tsx","features/profiles/ProfileFollowing.tsx","app/imageUpload/PhotoWidgetCropper.tsx","app/imageUpload/PhotoWidgetDropzone.tsx","app/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commomStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modelStateErros","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhotos","updateProfile","profile","updateFollowing","listFollowings","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","deletePhoto","activityStore","followingsCount","loadFollowings","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","space","Dropdown","pointing","text","link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Link","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","passwor","isValid","dirty","source","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","useHistory","nullable","enableReinitialize","uuid","handleFormSubmit","rows","showTimeSelect","timeCaption","dateFormat","placeholderText","border","Comment","Avatar","Author","Metadata","fomartDistanceToNow","Text","whiteSpace","resetForm","onKeyPress","shiftKey","Error","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","ActivityDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Tab","Pane","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","ProfileFollowing","menu","menuPosition","onTabChange","activeIndex","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.6b695b49.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    });\r\n};\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = store.commomStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(\r\n    async (response) => {\r\n        if (process.env.NODE_ENV === \"development\") await sleep(1000);\r\n        const pagination = response.headers[\"pagination\"];\r\n        if (pagination) {\r\n            response.data = new PaginatedResult(\r\n                response.data,\r\n                JSON.parse(pagination)\r\n            );\r\n            return response as AxiosResponse<PaginatedResult<any>>;\r\n        }\r\n        return response;\r\n    },\r\n    (error: AxiosError) => {\r\n        const { data, status, config } = error.response!;\r\n        switch (status) {\r\n            case 400:\r\n                if (typeof data === \"string\") {\r\n                    toast.error(data);\r\n                }\r\n                if (\r\n                    config.method === \"get\" &&\r\n                    data.errors.hasOwnProperty(\"id\")\r\n                ) {\r\n                    history.push(\"/not-found\");\r\n                }\r\n                if (data.errors) {\r\n                    const modelStateErros = [];\r\n                    for (const key in data.errors) {\r\n                        if (data.errors[key]) {\r\n                            modelStateErros.push(data.errors[key]);\r\n                        }\r\n                    }\r\n                    throw modelStateErros.flat();\r\n                }\r\n                break;\r\n            case 401:\r\n                toast.error(\"unauthorized\");\r\n                break;\r\n            case 404:\r\n                history.push(\"/not-found\");\r\n                break;\r\n            case 500:\r\n                store.commomStore.setServerError(data);\r\n                history.push(\"/server-error\");\r\n                break;\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) =>\r\n        axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) =>\r\n        axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) =>\r\n        axios\r\n            .get<PaginatedResult<Activity[]>>(\"/activities\", { params })\r\n            .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) =>\r\n        requests.post<void>(\"/activities\", activity),\r\n    update: (activity: ActivityFormValues) =>\r\n        requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n};\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>(\"/account\"),\r\n    login: (user: UserFormValues) =>\r\n        requests.post<User>(\"/account/login\", user),\r\n    register: (user: UserFormValues) =>\r\n        requests.post<User>(\"/account/register\", user),\r\n};\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append(\"File\", file); //precisa ser o mesmo nome da propriedade na api\r\n        return axios.post<Photo>(\"photos\", formData, {\r\n            headers: { \"Content-type\": \"multiparts/form-data\" },\r\n        });\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhotos: (id: string) => requests.delete(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) =>\r\n        requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) =>\r\n        requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n};\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n};\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername?: string;\r\n    isGoing?: boolean;\r\n    isHost?: boolean;\r\n    isCancelled?: boolean;\r\n    host?: Profile;\r\n    attendees?: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = \"\";\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date: Date | null = null;\r\n    city: string = \"\";\r\n    venue: string = \"\";\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.category;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingsCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<String, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set(\"all\", true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        );\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    };\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== \"startDate\") this.predicate.delete(key);\r\n            });\r\n        };\r\n        switch (predicate) {\r\n            case \"all\":\r\n                resetPredicate();\r\n                this.predicate.set(\"all\", true);\r\n                break;\r\n            case \"isGoing\":\r\n                resetPredicate();\r\n                this.predicate.set(\"going\", true);\r\n                break;\r\n            case \"isHost\":\r\n                resetPredicate();\r\n                this.predicate.set(\"host\", true);\r\n                break;\r\n            case \"startDate\":\r\n                this.predicate.delete(\"startDate\");\r\n                this.predicate.set(\"startDate\", value);\r\n        }\r\n    };\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\r\n        params.append(\"pageSize\", this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === \"startDate\") {\r\n                params.append(\"key\", (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort(\r\n            (a, b) => a.date!.getTime() - b.date!.getTime()\r\n        );\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, \"dd MMM yyyy\");\r\n                activities[date] = activities[date]\r\n                    ? [...activities[date], activity]\r\n                    : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        );\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach((activity) => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    };\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    };\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                (a) => a.username === user.username\r\n            );\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(\r\n                (x) => x.username === activity.hostUsername\r\n            );\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    };\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    };\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    };\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {\r\n                        ...this.getActivity(activity.id),\r\n                        ...activity,\r\n                    };\r\n                    this.activityRegistry.set(\r\n                        activity.id,\r\n                        updatedActivity as Activity\r\n                    );\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(\r\n                            (a) => a.username !== user?.username\r\n                        );\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(\r\n                    this.selectedActivity!.id,\r\n                    this.selectedActivity!\r\n                );\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled =\r\n                    !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(\r\n                    this.selectedActivity!.id,\r\n                    this.selectedActivity!\r\n                );\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    };\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach((activity) => {\r\n            activity.attendees!.forEach((attendee) => {\r\n                if (attendee.username === username) {\r\n                    attendee.following\r\n                        ? attendee.followersCount--\r\n                        : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            });\r\n        });\r\n    };\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.activeTab,\r\n            (activeTab) => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate =\r\n                        activeTab === 3 ? \"followers\" : \"following\";\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    };\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile)\r\n            return store.userStore.user.username === this.profile.username;\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => (this.loadingProfile = false));\r\n        }\r\n    };\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n\r\n                this.uploading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => (this.uploading = false));\r\n        }\r\n    };\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find((p) => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find((p) => p.id === photo.id)!.isMain =\r\n                        true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhotos(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(\r\n                        (p) => p.id !== photo.id\r\n                    );\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n\r\n            runInAction(() => {\r\n                if (\r\n                    this.profile &&\r\n                    this.profile.username !== store.userStore.user?.username &&\r\n                    this.profile.username === username\r\n                ) {\r\n                    following\r\n                        ? this.profile.followersCount++\r\n                        : this.profile.followersCount--;\r\n\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n\r\n                if (\r\n                    this.profile &&\r\n                    this.profile.username === store.userStore.user?.username\r\n                ) {\r\n                    following\r\n                        ? this.profile.followingsCount++\r\n                        : this.profile.followingsCount--;\r\n                }\r\n\r\n                this.followings.forEach((profile) => {\r\n                    if (profile.username === username) {\r\n                        profile.following\r\n                            ? profile.followersCount--\r\n                            : profile.followersCount++;\r\n\r\n                        profile.following = !profile.following;\r\n                    }\r\n                });\r\n\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    };\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(\r\n                this.profile!.username,\r\n                predicate\r\n            );\r\n\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => (this.loadingFollowings = false));\r\n        }\r\n    };\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commomStore.setToken(user.token);\r\n            runInAction(() => (this.user = user));\r\n            history.push(\"/activities\");\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    logout = () => {\r\n        store.commomStore.setToken(null);\r\n        window.localStorage.removeItem(\"jwt\");\r\n        this.user = null;\r\n        history.push(\"/\");\r\n    };\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => (this.user = user));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commomStore.setToken(user.token);\r\n            runInAction(() => (this.user = user));\r\n            history.push(\"/activities\");\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image;\r\n        }\r\n    };\r\n}\r\n","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./ActivityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommomStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./ProfileStore\";\r\nimport UserStore from \"./UserStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commomStore: CommomStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commomStore: new CommomStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommomStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () =>{\r\n        this.appLoaded = true;\r\n    }\r\n\r\n    \r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    body: JSX.Element | null,\r\n\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null,\r\n\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import {\r\n    HubConnection,\r\n    HubConnectionBuilder,\r\n    LogLevel,\r\n} from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(\r\n                    process.env.REACT_APP_CHAT_URL +\r\n                        \"?activityId=\" +\r\n                        activityId,\r\n                    {\r\n                        accessTokenFactory: () => store.userStore.user?.token!,\r\n                    }\r\n                )\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection\r\n                .start()\r\n                .catch((error) =>\r\n                    console.log(\"Error establishing connection:\" + error)\r\n                );\r\n\r\n            this.hubConnection.on(\"LoadComments\", (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(\r\n                        (comment) =>\r\n                            (comment.createdAt = new Date(\r\n                                comment.createdAt + \"Z\"\r\n                            ))\r\n                    );\r\n                    this.comments = comments;\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on(\"ReceiveComments\", (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection\r\n            ?.stop()\r\n            .catch((error) =>\r\n                console.log(\"Error stopping connection: \" + error)\r\n            );\r\n    };\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    };\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\nimport { link } from \"fs\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport default observer(function NavBar() {\r\n    const {\r\n        userStore: { user, logout },\r\n    } = useStore();\r\n    return (\r\n        <Menu inverted fixed=\"top\">\r\n            <Container>\r\n                <Menu.Item as={NavLink} to=\"/\" exact header>\r\n                    <img\r\n                        src=\"/assets/logo.png\"\r\n                        alt=\"logo\"\r\n                        style={{ marginRight: \"10px\" }}\r\n                    ></img>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to={\"/activities\"} name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to={\"/errors\"} name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button\r\n                        positive\r\n                        as={NavLink}\r\n                        to={\"/createActivity\"}\r\n                        content=\"Create Activity\"\r\n                    ></Button>\r\n                </Menu.Item>\r\n                <Menu.Item position=\"right\">\r\n                    <Image\r\n                        src={user?.image || \"/assets/user.png\"}\r\n                        avatar\r\n                        space=\"right\"\r\n                    />\r\n                    <Dropdown pointing=\"top left\" text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item\r\n                                as={link}\r\n                                to={`/profiles/${user?.username}`}\r\n                                text=\"My profile\"\r\n                                icon=\"user\"\r\n                            ></Dropdown.Item>\r\n                            <Dropdown.Item\r\n                                onClick={logout}\r\n                                text=\"Logout\"\r\n                                icon=\"power\"\r\n                            ></Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    );\r\n});\r\n","import React from \"react\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {\r\n        activityStore: { predicate, setPredicate },\r\n    } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu\r\n                vertical\r\n                size=\"large\"\r\n                style={{ width: \"100%\", marginTop: 25 }}\r\n            >\r\n                <Header\r\n                    icon=\"filter\"\r\n                    attached\r\n                    color=\"teal\"\r\n                    content=\"Filters\"\r\n                ></Header>\r\n                <Menu.Item\r\n                    content=\"All Activities\"\r\n                    active={predicate.has(\"all\")}\r\n                    onClick={() => setPredicate(\"all\", \"true\")}\r\n                ></Menu.Item>\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has(\"isGoing\")}\r\n                    onClick={() => setPredicate(\"isGoing\", \"true\")}\r\n                ></Menu.Item>\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has(\"isHost\")}\r\n                    onClick={() => setPredicate(\"isHost\", \"true\")}\r\n                ></Menu.Item>\r\n            </Menu>\r\n            <Header></Header>\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate(\"startDate\", date)}\r\n                value={predicate.get(\"startDate\") || new Date()}\r\n            ></Calendar>\r\n        </>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following\r\n            ? updateFollowing(username, false)\r\n            : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: \"100%\" }}>\r\n                <Button\r\n                    fluid\r\n                    color=\"teal\"\r\n                    content={profile.following ? \"Following\" : \"Not following\"}\r\n                ></Button>\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: \"100%\" }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? \"red\" : \"green\"}\r\n                    content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                ></Button>\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || \"/assets/user.png\"} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name=\"user\"></Icon>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}></FollowButton>\r\n        </Card>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({\r\n    attendees,\r\n}: Props) {\r\n    const styles = {\r\n        borderColor: \"orange\",\r\n        borderWidth: 2,\r\n    };\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map((attendee) => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item\r\n                            key={attendee.username}\r\n                            as={Link}\r\n                            to={`/profiles/${attendee.username}`}\r\n                        >\r\n                            <Image\r\n                                size=\"mini\"\r\n                                circular\r\n                                src={attendee.image || \"/assets/user.png\"}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            ></Image>\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee}></ProfileCard>\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    );\r\n});\r\n","import format from \"date-fns/format\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        attached=\"top\"\r\n                        color=\"red\"\r\n                        content=\"Cancelled\"\r\n                        style={{ textAlign: \"center\" }}\r\n                    ></Label>\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image\r\n                            style={{ marginBottom: 3 }}\r\n                            size=\"tiny\"\r\n                            circular\r\n                            src={activity.host?.image || \"/assets/user.png\"}\r\n                        ></Item.Image>\r\n                        <Item.Content>\r\n                            <Item.Header\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                            >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by{\" \"}\r\n                                <Link\r\n                                    to={`/profiles/${activity.host?.displayName}`}\r\n                                >\r\n                                    {activity.host?.displayName}\r\n                                </Link>\r\n                                {activity.host?.displayName}\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"orange\">\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"green\">\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name=\"clock\" />{\" \"}\r\n                    {format(activity.date!, \"dd MMM yyyy, h:mm aa\")}\r\n                    <Icon name=\"marker\" /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {activity.description}\r\n                    <Button\r\n                        as={Link}\r\n                        to={`/activities/${activity.id}`}\r\n                        color=\"teal\"\r\n                        floated=\"right\"\r\n                        content=\"View\"\r\n                    ></Button>\r\n                </span>\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n  const { activityStore } = useStore();\r\n  const { groupedActivities } = activityStore;\r\n\r\n  return (\r\n    <>\r\n      {groupedActivities.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Header sub color=\"teal\">\r\n            {group}\r\n          </Header>\r\n\r\n          {activities.map((activity) => (\r\n            <ActivityListItem key={activity.id} activity={activity} />\r\n          ))}\r\n        </Fragment>\r\n      ))}\r\n    </>\r\n  );\r\n});\r\n","import React, { Fragment } from \"react\";\r\nimport { Segment, Button, Placeholder } from \"semantic-ui-react\";\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button\r\n                            disabled\r\n                            color=\"blue\"\r\n                            floated=\"right\"\r\n                            content=\"View\"\r\n                        />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } =\r\n        activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 0) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return (\r\n        //o total de colunas possível aqui são 16\r\n        <Grid>\r\n            <Grid.Column width=\"10\">\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder></ActivityListItemPlaceholder>\r\n                        <ActivityListItemPlaceholder></ActivityListItemPlaceholder>\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={\r\n                            !loadingNext &&\r\n                            !!pagination &&\r\n                            pagination.currentPage < pagination.totalPages\r\n                        }\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList></ActivityList>\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilters></ActivityFilters>\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext}></Loader>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  placeholder: string;\r\n  name: string;\r\n  type?: string;\r\n  label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n  const [field, meta] = useField(props.name);\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <input {...field} {...props}></input>\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color=\"red\">\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  );\r\n}\r\n","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: \"\", password: \"\", error: null }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                userStore\r\n                    .login(values)\r\n                    .catch((error) =>\r\n                        setErrors({ error: \"Invalid e-mail or password\" })\r\n                    )\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form\r\n                    className=\"ui form\"\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <Header\r\n                        as=\"h2\"\r\n                        content=\"Login to Reactivities\"\r\n                        color=\"teal\"\r\n                        textAlign=\"center\"\r\n                    ></Header>\r\n                    <MyTextInput\r\n                        name=\"email\"\r\n                        placeholder=\"E-mail\"\r\n                    ></MyTextInput>\r\n                    <MyTextInput\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        type=\"password\"\r\n                    ></MyTextInput>\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={() => (\r\n                            <Label\r\n                                style={{ marginBottom: 10 }}\r\n                                basic\r\n                                color=\"red\"\r\n                                content={errors.error}\r\n                            ></Label>\r\n                        )}\r\n                    />\r\n                    <Button\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content=\"Login\"\r\n                        type=\"submit\"\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});\r\n","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err} </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    );\r\n}\r\n","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from \"yup\";\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: \"\",\r\n                username: \"\",\r\n                email: \"\",\r\n                password: \"\",\r\n                error: null,\r\n            }}\r\n            onSubmit={(values, { setErrors }) =>\r\n                userStore.login(values).catch((error) => setErrors({ error }))\r\n            }\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                passwor: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form\r\n                    className=\"ui form error\"\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <Header\r\n                        as=\"h2\"\r\n                        content=\"Sign up to Reactivities\"\r\n                        color=\"teal\"\r\n                        textAlign=\"center\"\r\n                    ></Header>\r\n                    <MyTextInput\r\n                        name=\"displayName\"\r\n                        placeholder=\"Display Name\"\r\n                    ></MyTextInput>\r\n                    <MyTextInput\r\n                        name=\"username\"\r\n                        placeholder=\"Username\"\r\n                    ></MyTextInput>\r\n                    <MyTextInput\r\n                        name=\"email\"\r\n                        placeholder=\"E-mail\"\r\n                    ></MyTextInput>\r\n                    <MyTextInput\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        type=\"password\"\r\n                    ></MyTextInput>\r\n                    <ErrorMessage\r\n                        name=\"error\"\r\n                        render={() => (\r\n                            <ValidationErrors\r\n                                errors={errors.error}\r\n                            ></ValidationErrors>\r\n                        )}\r\n                    />\r\n                    <Button\r\n                        disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting}\r\n                        positive\r\n                        content=\"Register\"\r\n                        type=\"submit\"\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as=\"h1\" inverted>\r\n                    <Image\r\n                        size=\"massive\"\r\n                        source=\"/assets/logo.png\"\r\n                        alt=\"logo\"\r\n                        style={{ marginBottom: 12 }}\r\n                    />\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header\r\n                            as=\"h2\"\r\n                            inverted\r\n                            content=\"Welcome to reactivities\"\r\n                        ></Header>\r\n                        <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button\r\n                            onClick={() => modalStore.openModal(<LoginForm />)}\r\n                            size=\"huge\"\r\n                            inverted\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() =>\r\n                                modalStore.openModal(<RegisterForm />)\r\n                            }\r\n                            size=\"huge\"\r\n                            inverted\r\n                        >\r\n                            Register\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    );\r\n});\r\n","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  inverted?: boolean;\r\n  content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({\r\n  inverted = true,\r\n  content = \"Loading...\",\r\n}: Props) {\r\n  return (\r\n    <Dimmer active={true} inverted={inverted}>\r\n      <Loader content={content}></Loader>\r\n    </Dimmer>\r\n  );\r\n}\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  placeholder: string;\r\n  name: string;\r\n  rows: number;\r\n  label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n  const [field, meta] = useField(props.name);\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <textarea {...field} {...props}></textarea>\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color=\"red\">\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  );\r\n}\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  placeholder: string;\r\n  name: string;\r\n  options: any;\r\n  label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n  const [field, meta, helpers] = useField(props.name);\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <Select\r\n        clearable\r\n        options={props.options}\r\n        value={field.value || null}\r\n        onChange={(e, d) => helpers.setValue(d.value)}\r\n        onBlur={() => helpers.setTouched(true)}\r\n        placeholder={props.placeholder}\r\n      ></Select>\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color=\"red\">\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  );\r\n}\r\n","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Films', value: 'films'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n  const [field, meta, helpers] = useField(props.name!);\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <DatePicker\r\n        {...field}\r\n        {...props}\r\n        selected={(field.value && new Date(field.value)) || null}\r\n        onChange={(value) => helpers.setValue(value)}\r\n      ></DatePicker>\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color=\"red\">\r\n          {meta.error}\r\n        </Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Segment, Button, Header } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/CategoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nexport default observer(function ActivityForm() {\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } =\r\n        activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(\r\n        new ActivityFormValues()\r\n    );\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required(\"The acitivity title is required\"),\r\n        description: Yup.string().required(\r\n            \"The acitivity description is required\"\r\n        ),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required(\"Date is required\").nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id)\r\n            loadActivity(id).then((activity) =>\r\n                setActivity(new ActivityFormValues(activity))\r\n            );\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid(),\r\n            };\r\n            createActivity(newActivity).then(() =>\r\n                history.push(`/activities/${newActivity.id}`)\r\n            );\r\n        } else {\r\n            updateActivity(activity).then(() =>\r\n                history.push(`/activities/${activity.id}`)\r\n            );\r\n        }\r\n    }\r\n\r\n    if (loadingInitial)\r\n        return (\r\n            <LoadingComponent content=\"Loading activity...\"></LoadingComponent>\r\n        );\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color=\"teal\"></Header>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={(values) => handleFormSubmit(values)}\r\n            >\r\n                {({ isValid, isSubmitting, dirty, handleSubmit }) => (\r\n                    <Form\r\n                        className=\"ui form\"\r\n                        onSubmit={handleSubmit}\r\n                        autoComplete=\"off\"\r\n                    >\r\n                        <MyTextInput\r\n                            name=\"title\"\r\n                            placeholder=\"title\"\r\n                        ></MyTextInput>\r\n                        <MyTextArea\r\n                            rows={3}\r\n                            placeholder=\"Description\"\r\n                            name=\"description\"\r\n                        ></MyTextArea>\r\n                        <MySelectInput\r\n                            placeholder=\"Category\"\r\n                            name=\"category\"\r\n                            options={categoryOptions}\r\n                        ></MySelectInput>\r\n                        <MyDateInput\r\n                            showTimeSelect\r\n                            timeCaption=\"time\"\r\n                            dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                            placeholderText=\"Date\"\r\n                            name=\"date\"\r\n                        ></MyDateInput>\r\n                        <Header\r\n                            content=\"Location Details\"\r\n                            sub\r\n                            color=\"teal\"\r\n                        ></Header>\r\n                        <MyTextInput\r\n                            placeholder=\"City\"\r\n                            name=\"city\"\r\n                        ></MyTextInput>\r\n                        <MyTextInput\r\n                            placeholder=\"Venue\"\r\n                            name=\"venue\"\r\n                        ></MyTextInput>\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            floated=\"right\"\r\n                            positive\r\n                            loading={isSubmitting}\r\n                            type=\"submit\"\r\n                            content=\"Submit\"\r\n                        ></Button>\r\n                        <Button\r\n                            as={Link}\r\n                            to=\"/activities\"\r\n                            floated=\"right\"\r\n                            type=\"button\"\r\n                            content=\"Cancel\"\r\n                        ></Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    );\r\n});\r\n","import { Formik, Form, FieldProps, Field } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, Header, Comment, Button, Loader } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from \"yup\";\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        };\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign=\"center\"\r\n                attached=\"top\"\r\n                inverted\r\n                color=\"teal\"\r\n                style={{ border: \"none\" }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map((comment) => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar\r\n                                src={comment.image || \"/assets/user.png\"}\r\n                            />\r\n                            <Comment.Content>\r\n                                <Comment.Author\r\n                                    as={Link}\r\n                                    to={`/profiles/${comment.username}`}\r\n                                >\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>\r\n                                        {fomartDistanceToNow(comment.createdAt)}{\" \"}\r\n                                        ago\r\n                                    </div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text\r\n                                    style={{ whiteSpace: \"pre-wrap\" }}\r\n                                >\r\n                                    {comment.body}\r\n                                </Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                    <Formik\r\n                        onSubmit={(values, { resetForm }) =>\r\n                            commentStore\r\n                                .addComment(values)\r\n                                .then(() => resetForm())\r\n                        }\r\n                        initialValues={{ body: \"\" }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required(),\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className=\"ui form\">\r\n                                <Field name=\"body\">\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{ position: \"relative\" }}>\r\n                                            <Loader\r\n                                                active={isSubmitting}\r\n                                            ></Loader>\r\n                                            <textarea\r\n                                                placeholder=\"Enter your comment (Enter to submit, SHIFT + enter for new line)\"\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={(e) => {\r\n                                                    if (\r\n                                                        e.key === \"Enter\" &&\r\n                                                        e.shiftKey\r\n                                                    ) {\r\n                                                        return;\r\n                                                    }\r\n                                                    if (\r\n                                                        e.key === \"Enter\" &&\r\n                                                        !e.shiftKey\r\n                                                    ) {\r\n                                                        e.preventDefault();\r\n                                                        isValid &&\r\n                                                            handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            ></textarea>\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    );\r\n});\r\nfunction fomartDistanceToNow(createdAt: Date): React.ReactNode {\r\n    throw new Error(\"Function not implemented.\");\r\n}\r\n","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Item, Segment, Image, Label } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nconst activityImageStyle = {\r\n    filter: \"brightness(30%)\",\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: \"absolute\",\r\n    bottom: \"5%\",\r\n    left: \"5%\",\r\n    width: \"100%\",\r\n    height: \"auto\",\r\n    color: \"white\",\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const {\r\n        activityStore: { updateAttendance, loading, cancelActivityToggle },\r\n    } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\r\n                {activity.isCancelled && (\r\n                    <Label\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            zIndex: 1000,\r\n                            left: -14,\r\n                            top: 20,\r\n                        }}\r\n                        ribbon\r\n                        color=\"red\"\r\n                        content=\"cancelled\"\r\n                    ></Label>\r\n                )}\r\n                <Image\r\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                    fluid\r\n                    style={activityImageStyle}\r\n                />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size=\"huge\"\r\n                                    content={activity.title}\r\n                                    style={{ color: \"white\" }}\r\n                                />\r\n                                <p>{format(activity.date!, \"dd MMM yyyy\")}</p>\r\n                                <p>\r\n                                    Hosted by{\" \"}\r\n                                    <strong>\r\n                                        <Link\r\n                                            to={`/profiles/${activity.host?.username}`}\r\n                                        >\r\n                                            {activity.host?.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached=\"bottom\">\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? \"green\" : \"red\"}\r\n                            floated=\"left\"\r\n                            basic\r\n                            content={\r\n                                activity.isCancelled\r\n                                    ? \"Re-activate Activity\"\r\n                                    : \"Cancel Activity\"\r\n                            }\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        ></Button>\r\n                        <Button\r\n                            disabled={activity.isCancelled}\r\n                            as={Link}\r\n                            to={`/manage/${activity.id}`}\r\n                            color=\"orange\"\r\n                            floated=\"right\"\r\n                        >\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>\r\n                        Cancel Attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button\r\n                        disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color=\"teal\"\r\n                    >\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n});\r\n","import format from \"date-fns/format\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n  activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment attached=\"top\">\r\n        <Grid>\r\n          <Grid.Column width={1}>\r\n            <Icon size=\"large\" color=\"teal\" name=\"info\" />\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <p>{activity.description}</p>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Grid verticalAlign=\"middle\">\r\n          <Grid.Column width={1}>\r\n            <Icon name=\"calendar\" size=\"large\" color=\"teal\" />\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <span>{format(activity.date!, \"dd MMM yyyy, h:mm aa\")}</span>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Grid verticalAlign=\"middle\">\r\n          <Grid.Column width={1}>\r\n            <Icon name=\"marker\" size=\"large\" color=\"teal\" />\r\n          </Grid.Column>\r\n          <Grid.Column width={11}>\r\n            <span>\r\n              {activity.venue}, {activity.city}\r\n            </span>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { Segment, List, Label, Item, Image } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({\r\n    activity: { attendees, host },\r\n}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign=\"center\"\r\n                style={{ border: \"none\" }}\r\n                attached=\"top\"\r\n                secondary\r\n                inverted\r\n                color=\"teal\"\r\n            >\r\n                {attendees.length} {attendees.length == 1 ? \"Person\" : \"People\"}{\" \"}\r\n                going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map((attendee) => (\r\n                        <Item\r\n                            key={attendee.username}\r\n                            style={{ position: \"relative\" }}\r\n                        >\r\n                            {attendee.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: \"absolute\" }}\r\n                                    color=\"orange\"\r\n                                    ribbon=\"right\"\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            )}\r\n                            <Image\r\n                                size=\"tiny\"\r\n                                src={attendee.image || \"/assets/user.png\"}\r\n                            />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Item.Header as=\"h3\">\r\n                                    <Link to={`/profiles/${attendee.username}`}>\r\n                                        {attendee.displayName}\r\n                                    </Link>\r\n                                </Item.Header>\r\n                                {attendee.following && (\r\n                                    <Item.Extra style={{ color: \"orange\" }}>\r\n                                        Following\r\n                                    </Item.Extra>\r\n                                )}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSideBar from \"./ActivityDetailedSideBar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const {\r\n        selectedActivity: activity,\r\n        loadingInitial,\r\n        loadActivity,\r\n        clearSelectedActivity,\r\n    } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity)\r\n        return <LoadingComponent></LoadingComponent>;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader\r\n                    activity={activity}\r\n                ></ActivityDetailedHeader>\r\n                <ActivityDetailedInfo\r\n                    activity={activity}\r\n                ></ActivityDetailedInfo>\r\n                <ActivityDetailedChat\r\n                    activityId={activity.id}\r\n                ></ActivityDetailedChat>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSideBar\r\n                    activity={activity}\r\n                ></ActivityDetailedSideBar>\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import React, { useState } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios\r\n            .get(baseUrl + \"buggy/not-found\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios\r\n            .get(baseUrl + \"buggy/bad-request\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios\r\n            .get(baseUrl + \"buggy/server-error\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios\r\n            .get(baseUrl + \"buggy/unauthorised\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios\r\n            .get(baseUrl + \"activities/notaguid\")\r\n            .catch((err) => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + \"activities\", {}).catch((err) => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as=\"h1\" content=\"Test Error component\" />\r\n            <Segment>\r\n                <Button.Group widths=\"7\">\r\n                    <Button\r\n                        onClick={handleNotFound}\r\n                        content=\"Not Found\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleBadRequest}\r\n                        content=\"Bad Request\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleValidationError}\r\n                        content=\"Validation Error\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleServerError}\r\n                        content=\"Server Error\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleUnauthorised}\r\n                        content=\"Unauthorised\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                    <Button\r\n                        onClick={handleBadGuid}\r\n                        content=\"Bad Guid\"\r\n                        basic\r\n                        primary\r\n                    />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && <ValidationErrors errors={errors}></ValidationErrors>}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Icon name=\"search\"></Icon>\r\n        Oops - we've looked everywhere and could not find this.\r\n      </Header>\r\n      <Segment.Inline>\r\n        <Button as={Link} to=\"/activities\" primary>\r\n          Return to Activities page\r\n        </Button>\r\n      </Segment.Inline>\r\n    </Segment>\r\n  );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n  const { commomStore } = useStore();\r\n\r\n  return (\r\n    <Container>\r\n      <Header as=\"h1\" content=\"Server Error\"></Header>\r\n      <Header as=\"h5\" color=\"red\" content={commomStore.error?.message}></Header>\r\n      {commomStore.error?.details && (\r\n        <Segment>\r\n          <Header as=\"h4\" content=\"Stack trace\" color=\"teal\"></Header>\r\n          <code style={{ marginTop: \"10px\" }}>{commomStore.error.details}</code>\r\n        </Segment>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n  const { modalStore } = useStore();\r\n\r\n  return (\r\n    <Modal\r\n      open={modalStore.modal.open}\r\n      onClose={modalStore.closeModal}\r\n      size=\"mini\"\r\n    >\r\n      <Modal.Content>{modalStore.modal.body}</Modal.Content>\r\n    </Modal>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated=\"left\"\r\n                        icon=\"user\"\r\n                        content={\r\n                            activeTab === 3\r\n                                ? `People follwing ${profile?.displayName}`\r\n                                : `People ${profile?.displayName} is following`\r\n                        }\r\n                    ></Header>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map((profile) => (\r\n                            <ProfileCard\r\n                                key={profile.username}\r\n                                profile={profile}\r\n                            >\r\n                                {\" \"}\r\n                            </ProfileCard>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});\r\n","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({\r\n    imagePreview,\r\n    setCropper,\r\n}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: \"100%\" }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview=\".img-preview\"\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={(cropper) => setCropper(cropper)}\r\n        ></Cropper>\r\n    );\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setFiles: (File: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: \"dashed 3px #eee\",\r\n        borderColor: \"#eee\",\r\n        borderRadius: \"5px\",\r\n        paddingTop: \"30px\",\r\n        textAlign: \"center\" as \"center\",\r\n        height: 200,\r\n    };\r\n\r\n    const dzActive = {\r\n        borderColor: \"green\",\r\n    };\r\n\r\n    const onDrop = useCallback(\r\n        (acceptedFiles) => {\r\n            setFiles(\r\n                acceptedFiles.map((file: any) =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file),\r\n                    })\r\n                )\r\n            );\r\n        },\r\n        [setFiles]\r\n    );\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n        onDrop,\r\n    });\r\n\r\n    return (\r\n        <div\r\n            {...getRootProps()}\r\n            style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}\r\n        >\r\n            <input {...getInputProps()} />\r\n            <Icon name=\"upload\" size=\"huge\"></Icon>\r\n            <Header content=\"Drop image here\"></Header>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        };\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content=\"Step 1 - Add Photo\"></Header>\r\n                <PhotoWidgetDropzone setFiles={setFiles}></PhotoWidgetDropzone>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}></Grid.Column>\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content=\"Step 2 - Resize Image\"></Header>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper\r\n                        setCropper={setCropper}\r\n                        imagePreview={files[0].preview}\r\n                    ></PhotoWidgetCropper>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}></Grid.Column>\r\n            <Grid.Column width={4}>\r\n                <Header\r\n                    color=\"teal\"\r\n                    content=\"Step 3 - Preview & Upload\"\r\n                ></Header>\r\n\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div\r\n                            className=\"img-preview\"\r\n                            style={{ minHeight: 200, overflow: \"hidden\" }}\r\n                        ></div>\r\n                        <Button.Group widths={2}>\r\n                            <Button\r\n                                loading={loading}\r\n                                onClick={onCrop}\r\n                                positive\r\n                                icon=\"check\"\r\n                            ></Button>\r\n                            <Button\r\n                                disabled={loading}\r\n                                onClick={() => setFiles([])}\r\n                                positive\r\n                                icon=\"close\"\r\n                            ></Button>\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n}\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const {\r\n        profileStore: {\r\n            isCurrentUser,\r\n            uploadPhoto,\r\n            uploading,\r\n            loading,\r\n            setMainPhoto,\r\n            deletePhoto,\r\n        },\r\n    } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState(\"\");\r\n\r\n    function handleSetMainPhoto(\r\n        photo: Photo,\r\n        e: SyntheticEvent<HTMLButtonElement>\r\n    ) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleDeletePhoto(\r\n        photo: Photo,\r\n        e: SyntheticEvent<HTMLButtonElement>\r\n    ) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated=\"left\"\r\n                        icon=\"image\"\r\n                        content=\"Photos\"\r\n                    ></Header>\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated=\"left\"\r\n                            basic\r\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        ></Button>\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget\r\n                            uploadPhoto={handlePhotoUpload}\r\n                            loading={uploading}\r\n                        />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map((photo) => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url}></Image>\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"green\"\r\n                                                content=\"main\"\r\n                                                name={\"main\" + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={\r\n                                                    target ===\r\n                                                        \"main\" + photo.id &&\r\n                                                    loading\r\n                                                }\r\n                                                onClick={(e) =>\r\n                                                    handleSetMainPhoto(photo, e)\r\n                                                }\r\n                                            ></Button>\r\n                                            <Button\r\n                                                loading={\r\n                                                    target === photo.id &&\r\n                                                    loading\r\n                                                }\r\n                                                basic\r\n                                                color=\"red\"\r\n                                                icon=\"trash\"\r\n                                                onClick={(e) =>\r\n                                                    handleDeletePhoto(photo, e)\r\n                                                }\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            ></Button>\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileFollowing from \"./ProfileFollowing\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: \"About\", render: () => <Tab.Pane>About Content</Tab.Pane> },\r\n        {\r\n            menuItem: \"Photos\",\r\n            render: () => <ProfilePhotos profile={profile} />,\r\n        },\r\n        {\r\n            menuItem: \"Events\",\r\n            render: () => <Tab.Pane>Events Content</Tab.Pane>,\r\n        },\r\n        {\r\n            menuItem: \"Followers\",\r\n            render: () => <ProfileFollowing></ProfileFollowing>,\r\n        },\r\n        {\r\n            menuItem: \"Following\",\r\n            render: () => <ProfileFollowing />,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition=\"right\"\r\n            panes={panes}\r\n            onTabChange={(e, data) =>\r\n                profileStore.setActiveTab(data.activeIndex)\r\n            }\r\n        ></Tab>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {\r\n    Divider,\r\n    Grid,\r\n    Header,\r\n    Item,\r\n    Segment,\r\n    Statistic,\r\n} from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image\r\n                                avatar\r\n                                size=\"small\"\r\n                                src={profile.image || \"/assets/user.png\"}\r\n                            ></Item.Image>\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Header\r\n                                    as=\"h1\"\r\n                                    content={profile.displayName}\r\n                                ></Header>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic\r\n                            label=\"Followers\"\r\n                            value={profile.followersCount}\r\n                        ></Statistic>\r\n                        <Statistic\r\n                            label=\"Following\"\r\n                            value={profile.followingsCount}\r\n                        ></Statistic>\r\n                    </Statistic.Group>\r\n                    <Divider></Divider>\r\n                    <FollowButton profile={profile}></FollowButton>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        };\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile)\r\n        return (\r\n            <LoadingComponent content=\"Loading profile...\"></LoadingComponent>\r\n        );\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && (\r\n                    <>\r\n                        <ProfileHeader profile={profile}></ProfileHeader>\r\n                        <ProfileContent profile={profile}></ProfileContent>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n});\r\n","import {\r\n    Redirect,\r\n    Route,\r\n    RouteComponentProps,\r\n    RouteProps,\r\n} from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component:\r\n        | React.ComponentType<RouteComponentProps<any>>\r\n        | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const {\r\n        userStore: { isLoggedIn },\r\n    } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) =>\r\n                isLoggedIn ? <Component {...props} /> : <Redirect to={\"/\"} />\r\n            }\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport NavBar from \"./NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport { observer } from \"mobx-react-lite\";\nimport HomePage from \"../../features/home/homePage\";\nimport { Route, Switch, useLocation } from \"react-router-dom\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\nimport TestErrors from \"../../features/errors/TestErrors\";\nimport { ToastContainer } from \"react-toastify\";\nimport NotFound from \"../../features/errors/NotFound\";\nimport ServerError from \"../../features/errors/ServerError\";\nimport { useStore } from \"../stores/store\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/modalContainer\";\nimport ProfilePage from \"../../features/profiles/ProfilePage\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nfunction App() {\n    const location = useLocation();\n    const { commomStore, userStore } = useStore();\n\n    useEffect(() => {\n        if (commomStore.token) {\n            userStore.getUser().finally(() => commomStore.setAppLoaded());\n        } else {\n            commomStore.setAppLoaded();\n        }\n    }, [commomStore, userStore]);\n\n    if (!commomStore.appLoaded)\n        return <LoadingComponent content=\"Loading app...\"></LoadingComponent>;\n\n    return (\n        <>\n            <ToastContainer\n                position=\"bottom-right\"\n                hideProgressBar\n            ></ToastContainer>\n            <ModalContainer />\n            <Route exact path=\"/\" component={HomePage}></Route>\n\n            <Route\n                path={\"/(.+)\"}\n                render={() => (\n                    <>\n                        <NavBar></NavBar>\n                        <Container style={{ marginTop: \"7em\" }}>\n                            {/*  Garantir que o nome da rota seja apenas o informado no path */}\n                            <Switch>\n                                <PrivateRoute\n                                    exact\n                                    path=\"/activities\"\n                                    component={ActivityDashboard}\n                                ></PrivateRoute>\n                                <PrivateRoute\n                                    path=\"/activities/:id\"\n                                    component={ActivityDetails}\n                                ></PrivateRoute>\n                                <PrivateRoute\n                                    key={location.key}\n                                    path={[\"/createActivity\", \"/manage/:id\"]}\n                                    component={ActivityForm}\n                                ></PrivateRoute>\n                                <PrivateRoute\n                                    path=\"/profiles/:username\"\n                                    component={ProfilePage}\n                                ></PrivateRoute>\n                                <PrivateRoute\n                                    path=\"/errors\"\n                                    component={TestErrors}\n                                ></PrivateRoute>\n                                <Route\n                                    path=\"/server-errors\"\n                                    component={ServerError}\n                                ></Route>\n                                <Route component={NotFound}></Route>\n                            </Switch>\n                        </Container>\n                    </>\n                )}\n            ></Route>\n        </>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./app/layout/styles.css\";\nimport App from \"./app/layout/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store, StoreContext } from \"./app/stores/store\";\nimport { Router } from \"react-router-dom\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { createBrowserHistory } from \"history\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop></ScrollToTop>\n            <App />\n        </Router>\n    </StoreContext.Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}